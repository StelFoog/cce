{"version":3,"file":"executePhase.js","sourceRoot":"","sources":["../../src/executePhase.ts"],"names":[],"mappings":";;AAAA,+CAAgD;AAChD,yBAAiD;AACjD,2BAA6B;AAG7B,SAAwB,YAAY,CAAC,MAAiB;IAC7C,IAAA,OAAO,GAA4C,MAAM,QAAlD,EAAE,gBAAgB,GAA0B,MAAM,iBAAhC,EAAE,MAAM,GAAkB,MAAM,OAAxB,EAAE,KAAK,GAAW,MAAM,MAAjB,EAAE,IAAI,GAAK,MAAM,KAAX,CAAY;IAElE,IAAA,wBAAQ,EAAC,mBAAY,OAAO,CAAE,CAAC,CAAC;IAChC,IAAM,KAAK,GAAG,IAAA,qBAAK,EAAC,YAAK,OAAO,CAAE,EAAE,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAG7D,IAAI,YAAY,GAAW,EAAE,CAAC;IAC9B,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACjC,IAAI,MAAM,EAAE;QACX,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAI;YAC5B,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;KACH;SAAM;QACN,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAClC;IAGD,IAAI,KAAK,EAAE;QACV,IAAM,eAAa,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;QACtD,IAAA,aAAQ,EAAC,eAAa,EAAE,UAAC,KAAK,EAAE,IAAI;YACnC,IAAI,KAAK,EAAE;gBACV,OAAO,CAAC,KAAK,CAAC,+BAAwB,eAAa,qCAAkC,CAAC,CAAC;gBACvF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAChB;YACD,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;KACH;SAAM;QACN,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAI;YAC7B,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;KACH;IAED,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAG;QACrB,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI;YAAE,IAAA,WAAM,EAAC,OAAO,CAAC,CAAC;QAC3B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAI;QACrB,IAAM,WAAW,GAAG,mCAA4B,IAAI,CAAE,CAAC;QAEvD,IAAI,MAAM,EAAE;YACX,IAAA,cAAS,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,EAAE,YAAY,GAAG,WAAW,EAAE;gBACvE,IAAI,CAAC,IAAI;oBAAE,IAAA,WAAM,EAAC,OAAO,CAAC,CAAC;gBAC3B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;SACH;aAAM;YACN,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACzB,IAAI,CAAC,IAAI;gBAAE,IAAA,WAAM,EAAC,OAAO,CAAC,CAAC;YAC3B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAChB;IACF,CAAC,CAAC,CAAC;AACJ,CAAC;AAtDD,+BAsDC","sourcesContent":["import { execSync, spawn } from 'child_process';\nimport { readFile, rmSync, writeFile } from 'fs';\nimport * as path from 'path';\nimport { cceParams } from '.';\n\nexport default function executePhase(params: cceParams): void {\n\tconst { outfile, executeArguments, stdout, stdin, save } = params;\n\n\texecSync(`chmod +x ${outfile}`); // in case file isn't automatically made executable\n\tconst child = spawn(`./${outfile}`, executeArguments.parsed);\n\n\t// stdout\n\tlet stdoutResult: string = '';\n\tchild.stdout.setEncoding('utf8');\n\tif (stdout) {\n\t\tchild.stdout.on('data', (data) => {\n\t\t\tstdoutResult += data.toString();\n\t\t});\n\t} else {\n\t\tchild.stdout.pipe(process.stdout);\n\t}\n\n\t// stdin\n\tif (stdin) {\n\t\tconst stdinFilePath = path.join(process.cwd(), stdin);\n\t\treadFile(stdinFilePath, (error, data) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(`error: couldn't pass ${stdinFilePath} to stdin, file couldn't be read`);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t\tchild.stdin.write(data + '\\0');\n\t\t});\n\t} else {\n\t\tprocess.stdin.on('data', (data) => {\n\t\t\tchild.stdin.write(data);\n\t\t});\n\t}\n\n\tchild.on('error', (err) => {\n\t\tconsole.log('Process Error');\n\t\tconsole.log(err);\n\t\tif (!save) rmSync(outfile);\n\t\tprocess.exit(1);\n\t});\n\n\tchild.on('exit', (code) => {\n\t\tconst exitMessage = `Process exited with code ${code}`;\n\n\t\tif (stdout) {\n\t\t\twriteFile(path.join(process.cwd(), stdout), stdoutResult + exitMessage, () => {\n\t\t\t\tif (!save) rmSync(outfile);\n\t\t\t\tprocess.exit(0);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log(exitMessage);\n\t\t\tif (!save) rmSync(outfile);\n\t\t\tprocess.exit(0);\n\t\t}\n\t});\n}\n"]}