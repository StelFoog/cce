{"version":3,"file":"includedFiles.js","sourceRoot":"","sources":["../../src/includedFiles.ts"],"names":[],"mappings":";;AAAA,yBAAkC;AAClC,2BAA6B;AAE7B,IAAM,YAAY,GAAG,iBAAiB,CAAC;AAOvC,SAAwB,aAAa,CAAC,IAAY;IACjD,IAAM,KAAK,GAAa,EAAE,CAAC;IAE3B,IAAM,KAAK,GAAG,IAAA,iBAAY,EAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACxD,KAAK,CAAC,OAAO,CAAC,UAAC,CAAC;QACf,IAAI,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;YAC1B,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAClF,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBAC9B,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrB,KAAK,CAAC,IAAI,OAAV,KAAK,EAAS,aAAa,CAAC,QAAQ,CAAC,EAAE;aACvC;SACD;IACF,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACd,CAAC;AAfD,gCAeC;AAED,SAAS,eAAe,CAAC,IAAY;IACpC,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,IAAI,KAAK,GAAG,IAAI,UAAU;YAAE,MAAM;aACjC,IAAI,IAAI,KAAK,GAAG;YAAE,UAAU,GAAG,IAAI,CAAC;aACpC,IAAI,UAAU;YAAE,GAAG,IAAI,IAAI,CAAC;KACjC;IAED,OAAO,GAAG,CAAC;AACZ,CAAC","sourcesContent":["import { readFileSync } from 'fs';\nimport * as path from 'path';\n\nconst includeRegex = /#include *?\".+\"/;\n\n/**\n * Builds an array of all files included by the main file and those included by it and so forth\n * @param file Full path to the file\n * @returns Full path to all the files to be compiled\n */\nexport default function includedFiles(file: string): string[] {\n\tconst files: string[] = [];\n\n\tconst lines = readFileSync(file).toString().split('\\n');\n\tlines.forEach((l) => {\n\t\tif (l.match(includeRegex)) {\n\t\t\tconst filePath = path.join(file, '../', pathFromInclude(l)).replace(/\\.h$/, '.c');\n\t\t\tif (!files.includes(filePath)) {\n\t\t\t\tfiles.push(filePath);\n\t\t\t\tfiles.push(...includedFiles(filePath));\n\t\t\t}\n\t\t}\n\t});\n\n\treturn files;\n}\n\nfunction pathFromInclude(line: string): string {\n\tlet str = '';\n\tlet quoteFound = false;\n\tfor (let i = 0; i < line.length; i++) {\n\t\tconst char = line[i];\n\t\tif (char === '\"' && quoteFound) break;\n\t\telse if (char === '\"') quoteFound = true;\n\t\telse if (quoteFound) str += char;\n\t}\n\n\treturn str;\n}\n"]}