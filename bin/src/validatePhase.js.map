{"version":3,"file":"validatePhase.js","sourceRoot":"","sources":["../../src/validatePhase.ts"],"names":[],"mappings":"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","sourcesContent":["import * as chalk from 'chalk';\nimport { exec } from 'child_process';\nimport { existsSync, stat } from 'fs';\nimport * as path from 'path';\nimport { cceParams } from '.';\nimport includedFiles from './includedFiles';\nimport startLoading from './loading';\n\nexport default function validatePhase(\n\tparams: cceParams,\n\tcallback: (includedFiles: string[]) => any\n): void {\n\tconst { file, onlyExecPrints, executeArguments, compilerArguments, compiler } = params;\n\tconst filePath = path.join(process.cwd(), file);\n\n\tconst validatingLoader = !onlyExecPrints && startLoading('Validating');\n\n\t// Find errors\n\tif (executeArguments.error) {\n\t\tvalidatingLoader.error();\n\t\tconsole.error('error: missing dequote from execute arguments');\n\t\tprocess.exit(1);\n\t}\n\n\t// Find file\n\tif (!existsSync(path.join(process.cwd(), file))) {\n\t\tvalidatingLoader.error();\n\t\tconsole.error(`error: can't find file ${file}`);\n\t\tprocess.exit(1);\n\t}\n\t// Find included files\n\tconst allFiles = includedFiles(path.join(process.cwd(), file));\n\tconst missingFiles: string[] = [];\n\tallFiles.forEach((f) => {\n\t\tif (!existsSync(f)) missingFiles.push(f);\n\t});\n\tif (missingFiles.length) {\n\t\tvalidatingLoader.error();\n\t\tmissingFiles.forEach((f) => {\n\t\t\tconsole.error(`error: can't find file ${f}`);\n\t\t});\n\t\tprocess.exit(1);\n\t}\n\n\t// Find warnings\n\tlet warnings: string[] = [];\n\tif (compilerArguments.match(/(-o|--output)/))\n\t\twarnings.push(\n\t\t\t'--compiler-arguments contains an --output option, this could prevent CCE from executing the compiled file, please use the CCE --outfile (-o) option instead'\n\t\t);\n\n\texecuteArguments.specials.forEach((s) => {\n\t\tswitch (s[0]) {\n\t\t\tcase '<': {\n\t\t\t\twarnings.push(\n\t\t\t\t\t'--execute-arguments contains redirect <, this will not have any effect, please use CCE --stdin option instead'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase '>': {\n\t\t\t\twarnings.push(\n\t\t\t\t\t'--execute-arguments contains redirect >, this will not have any effect, please use CCE --stdout option instead'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tif (!existsSync(filePath)) {\n\t\tif (!onlyExecPrints) validatingLoader.error();\n\t\tconsole.error(`error: file ${filePath} doesn't exist`);\n\t\tprocess.exit(1);\n\t}\n\n\tstat(filePath, (error, stats) => {\n\t\tif (error) {\n\t\t\tif (!onlyExecPrints) validatingLoader.error();\n\t\t\tconsole.error(`error: there was an issue retrieving information about the file ${filePath}`);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (!stats.isFile()) {\n\t\t\tif (!onlyExecPrints) validatingLoader.error();\n\t\t\tconsole.error(`error: ${filePath} is not a file`);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\t// Exists and is a file\n\t\texec(`command -v ${compiler}`, async (error) => {\n\t\t\tif (error) {\n\t\t\t\tif (!onlyExecPrints) validatingLoader.error();\n\t\t\t\tconsole.error(`error: compiler ${compiler} doesn't exist`);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\n\t\t\tif (!onlyExecPrints) {\n\t\t\t\tvalidatingLoader.done();\n\t\t\t\twarnings.forEach((w) => console.log(`${chalk.hex('#a2e')('Warning:')} ${w}`));\n\t\t\t}\n\n\t\t\t// Next phase\n\t\t\tcallback(allFiles);\n\t\t});\n\t});\n}\n"]}