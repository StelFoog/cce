{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;AACA,uCAAoC;AACpC,yBAAwC;AACxC,2BAA8B;AAC9B,uCAA0C;AAC1C,yCAAsD;AACtD,iDAA4C;AAC5C,+CAA0C;AAC1C,+CAA0C;AA2B1C,IAAM,gBAAgB,GAAG,eAAe,CAAC;AAGzC,IAAM,OAAO,GAAG,IAAI,mBAAO,EAAE,CAAC;AAC9B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;AAC3F,OAAO;KACL,QAAQ,CAAC,QAAQ,EAAE,yBAAyB,CAAC;KAC7C,MAAM,CAAC,2BAA2B,EAAE,kCAAkC,CAAC;KACvE,MAAM,CAAC,uCAAuC,EAAE,kCAAkC,CAAC;KACnF,MAAM,CAAC,sCAAsC,EAAE,2CAA2C,CAAC;KAC3F,MAAM,CAAC,gBAAgB,EAAE,2BAA2B,CAAC;KACrD,MAAM,CAAC,iBAAiB,EAAE,4BAA4B,CAAC;KACvD,MAAM,CAAC,sBAAsB,EAAE,oDAAoD,CAAC;KACpF,MAAM,CAAC,YAAY,EAAE,8DAA8D,CAAC;KACpF,MAAM,CACN,cAAc,EACd,6GAA6G,CAC7G;KACA,MAAM,CACN,0BAA0B,EAC1B,gFAAgF,CAChF,CAAC;AACH,OAAO,CAAC,KAAK,EAAE,CAAC;AACT,IAAA,IAAI,GAAI,OAAO,CAAC,IAAI,GAAhB,CAAiB;AAC5B,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,EAAW,CAAC;AAIrC,IAAM,QAAQ,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,KAAI,KAAK,CAAC;AACzC,IAAM,iBAAiB,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,iBAAiB,KAAI,EAAE,CAAC;AACxD,IAAM,gBAAgB,GAAG,IAAA,mBAAS,EAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,gBAAgB,KAAI,EAAE,CAAC,CAAC;AACjE,IAAM,KAAK,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,KAAI,EAAE,CAAC;AAChC,IAAM,MAAM,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,KAAI,EAAE,CAAC;AAClC,IAAM,OAAO,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,KAAI,UAAG,IAAI,cAAW,CAAC;AACpD,IAAM,IAAI,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,KAAI,KAAK,CAAC;AACjC,IAAM,IAAI,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,KAAI,KAAK,CAAC;AACjC,IAAM,cAAc,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,cAAc,KAAI,KAAK,CAAC;AAGrD,IAAM,SAAS,GAAc;IAC5B,IAAI,MAAA;IACJ,QAAQ,UAAA;IACR,iBAAiB,mBAAA;IACjB,gBAAgB,kBAAA;IAChB,KAAK,OAAA;IACL,MAAM,QAAA;IACN,OAAO,SAAA;IACP,IAAI,MAAA;IACJ,IAAI,MAAA;IACJ,cAAc,gBAAA;CACd,CAAC;AAGF,IAAA,uBAAa,EAAC,SAAS,EAAE,UAAC,aAAa;IACtC,IAAA,sBAAY,EAAC,SAAS,EAAE,aAAa,EAAE;QACtC,IAAA,sBAAY,EAAC,SAAS,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACvC,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;QACrE,IAAA,WAAM,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAChE,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC;QAAE,IAAA,WAAM,EAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;IAC7F,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAChC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\nimport { Command } from 'commander';\nimport { existsSync, rmSync } from 'fs';\nimport path = require('path');\nimport pjson = require('../package.json');\nimport parseArgs, { ParsedObject } from './parseArgs';\nimport validatePhase from './validatePhase';\nimport compilePhase from './compilePhase';\nimport executePhase from './executePhase';\n\nexport type Options = {\n\tcompiler?: string;\n\tcompilerArguments?: string;\n\texecuteArguments?: string;\n\tstdin?: string;\n\tstdout?: string;\n\toutfile?: string;\n\tsave?: true;\n\tasIs?: true;\n\tonlyExecPrints?: true;\n};\n\nexport type cceParams = {\n\tfile: string;\n\tcompiler: string;\n\tcompilerArguments: string;\n\texecuteArguments: ParsedObject;\n\tstdin: string;\n\tstdout: string;\n\toutfile: string;\n\tsave: boolean;\n\tasIs: boolean;\n\tonlyExecPrints: boolean;\n};\n\nconst modifiedFileName = '__cce_mod__.c';\n\n// Set up command line argumets and options\nconst program = new Command();\nprogram.name('cce').description(pjson.description).version(pjson.version, '-v, --version');\nprogram\n\t.argument('<file>', 'file to compile and run')\n\t.option('-c, --compiler <compiler>', 'compiler to use, defaults to GCC')\n\t.option('-ca, --compiler-arguments <arguments>', 'arguments passed to the compiler')\n\t.option('-ea, --execute-arguments <arguments>', 'arguments passed to the executable result')\n\t.option('--stdin <file>', 'sets stdin for executable')\n\t.option('--stdout <file>', 'sets stdout for executable')\n\t.option('-o, --outfile <name>', 'name of compiled file, defaults to <file>__cce__.o')\n\t.option('-s, --save', 'saves the file after execution, otherwise it will be deleted')\n\t.option(\n\t\t'-ai, --as-is',\n\t\t'compiles the original file without modification, could result in unexpected behavior during execution phase'\n\t)\n\t.option(\n\t\t'-oep, --only-exec-prints',\n\t\t\"doesn't print or time verification and compile phases, mainly used for testing\"\n\t);\nprogram.parse();\nconst [file] = program.args;\nconst opts = program.opts<Options>();\n\n// Get options\n// TODO: Should be extended to use g++ for cpp files\nconst compiler = opts?.compiler || 'gcc';\nconst compilerArguments = opts?.compilerArguments || '';\nconst executeArguments = parseArgs(opts?.executeArguments || '');\nconst stdin = opts?.stdin || '';\nconst stdout = opts?.stdout || '';\nconst outfile = opts?.outfile || `${file}__cce__.o`;\nconst save = opts?.save || false;\nconst asIs = opts?.asIs || false;\nconst onlyExecPrints = opts?.onlyExecPrints || false;\n\n// Create params object\nconst cceParams: cceParams = {\n\tfile,\n\tcompiler,\n\tcompilerArguments,\n\texecuteArguments,\n\tstdin,\n\tstdout,\n\toutfile,\n\tsave,\n\tasIs,\n\tonlyExecPrints,\n};\n\n// Run CCE phases\nvalidatePhase(cceParams, (includedFiles) => {\n\tcompilePhase(cceParams, includedFiles, () => {\n\t\texecutePhase(cceParams);\n\t});\n});\n\nprocess.on('SIGINT', () => {\n\tconsole.log('\\nPerforming cleanup...');\n\tif (existsSync(path.join(process.cwd(), file, '..', modifiedFileName)))\n\t\trmSync(path.join(process.cwd(), file, '..', modifiedFileName));\n\tif (existsSync(path.join(process.cwd(), outfile))) rmSync(path.join(process.cwd(), outfile));\n\tconsole.log('Cleanup complete');\n\tprocess.exit(0);\n});\n"]}