{"version":3,"file":"compilePhase.js","sourceRoot":"","sources":["../../src/compilePhase.ts"],"names":[],"mappings":"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","sourcesContent":["import * as chalk from 'chalk';\nimport { exec } from 'child_process';\nimport { existsSync, readFile, rmSync, writeFile } from 'fs';\nimport * as path from 'path';\nimport { cceParams } from '.';\nimport startLoading from './loading';\n\nexport const mainMatch = /main[\\n\\t ]*?\\([^]*?\\)[\\n\\t ]*?\\{/;\nexport const modifiedFile = '__cce_mod__.c';\n\nexport default function compilePhase(params: cceParams, callback: () => any): void {\n\tconst { file, onlyExecPrints, asIs, compiler, compilerArguments, outfile } = params;\n\n\tconst compileLoader = !onlyExecPrints && startLoading('Compiling');\n\n\tif (asIs) {\n\t\texec(\n\t\t\t`${compiler} ${file} ${compilerArguments || ''} -o ${outfile}`,\n\t\t\t(error, stdout, stderr) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tif (!onlyExecPrints) compileLoader.error();\n\t\t\t\t\tconsole.error(stderr);\n\t\t\t\t\tprocess.exit(1);\n\t\t\t\t}\n\n\t\t\t\tif (!existsSync(path.join(process.cwd(), outfile))) {\n\t\t\t\t\tif (!onlyExecPrints) compileLoader.error();\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`error: Compiled file not found where expected, likely caused by compiler ${compiler} not handeling -o in an expected way.` +\n\t\t\t\t\t\t\t'\\nA possible workaround is to provide the --compiler-arguments and --outfile option with the same filename'\n\t\t\t\t\t);\n\t\t\t\t\tprocess.exit(1);\n\t\t\t\t}\n\n\t\t\t\tif (!onlyExecPrints) {\n\t\t\t\t\tcompileLoader.done();\n\t\t\t\t\tconsole.log(stdout);\n\t\t\t\t}\n\n\t\t\t\t// Next phase\n\t\t\t\tcallback();\n\t\t\t}\n\t\t);\n\t} else {\n\t\tgenerateModFile(file, () => {\n\t\t\texec(\n\t\t\t\t`${compiler} ${modifiedFile}${compilerArguments && ` ${compilerArguments}`} -o ${outfile}`,\n\t\t\t\t(error, stdout, stderr) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tif (!onlyExecPrints) compileLoader.error();\n\t\t\t\t\t\tconsole.log();\n\t\t\t\t\t\tconsole.error(hideMod(file, stderr));\n\t\t\t\t\t\trmSync(`${process.cwd()}/${modifiedFile}`);\n\t\t\t\t\t\tprocess.exit(1);\n\t\t\t\t\t}\n\t\t\t\t\trmSync(`${process.cwd()}/${modifiedFile}`);\n\n\t\t\t\t\tif (!existsSync(path.join(process.cwd(), outfile))) {\n\t\t\t\t\t\tif (!onlyExecPrints) compileLoader.error();\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t`error: Compiled file not found where expected, likely caused by compiler ${compiler} not handeling -o in an expected way.` +\n\t\t\t\t\t\t\t\t'\\nA possible workaround is to provide the --compiler-arguments and --outfile option with the same filename'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tprocess.exit(1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!onlyExecPrints) {\n\t\t\t\t\t\tcompileLoader.done();\n\t\t\t\t\t\tconsole.log();\n\t\t\t\t\t\tif (stderr || stdout) console.log(chalk.bold('Compiler says:'));\n\t\t\t\t\t\tif (stderr) console.log(hideMod(file, stderr));\n\t\t\t\t\t\tif (stdout) console.log(hideMod(file, stdout));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Next phase\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nfunction generateModFile(file: string, callback: () => any): void {\n\treadFile(file, (error, data) => {\n\t\tif (error) {\n\t\t\tconsole.error(error);\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tconst original = data.toString();\n\t\tconst match = mainMatch.exec(original);\n\t\twriteFile(\n\t\t\t`${process.cwd()}/${modifiedFile}`,\n\t\t\t'#include <stdio.h>\\n' +\n\t\t\t\toriginal.slice(0, match.index + match[0].length) +\n\t\t\t\t'\\nsetvbuf(stdout, (void*)0, _IONBF, 0);' +\n\t\t\t\toriginal.slice(match.index + match[0].length),\n\t\t\t(error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t\tprocess.exit(1);\n\t\t\t\t}\n\n\t\t\t\tcallback();\n\t\t\t}\n\t\t);\n\t});\n}\n\nfunction hideMod(file: string, text: string): string {\n\treturn (\n\t\ttext.replace(new RegExp(modifiedFile, 'g'), file) +\n\t\t`\\n${chalk\n\t\t\t.hex('#e83')\n\t\t\t.bold(\n\t\t\t\t'Note:'\n\t\t\t)} Row numbers can be of by one. Run with flag -ai to get exact values from compilation errors and warnings`\n\t);\n}\n"]}