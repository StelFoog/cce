{"version":3,"file":"parseArgs.js","sourceRoot":"","sources":["../../src/parseArgs.ts"],"names":[],"mappings":";;AAWA,SAAwB,SAAS,CAAC,IAAY;IAC7C,IAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAM,QAAQ,GAAa,EAAE,CAAC;IAE9B,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAMX,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE;YACrC,KAAK,GAAG,IAAI,CAAC;YACb,QAAQ,GAAG,IAAI,CAAC;SAChB;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACxB,KAAK,GAAG,KAAK,CAAC;SACd;aAAM,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;YAChE,IAAI,OAAO,EAAE;gBACZ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACrB,OAAO,GAAG,EAAE,CAAC;aACb;YACD,OAAO,GAAG,IAAI,CAAC;SACf;aAAM,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE;YAClC,IAAI,OAAO,IAAI,QAAQ,EAAE;gBACxB,IAAI,OAAO,EAAE;oBACZ,QAAQ,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC;oBACjC,OAAO,GAAG,EAAE,CAAC;iBACb;qBAAM;oBACN,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACrB;gBACD,OAAO,GAAG,EAAE,CAAC;gBACb,QAAQ,GAAG,KAAK,CAAC;aACjB;SACD;aAAM,IAAI,IAAI,KAAK,GAAG,IAAI,KAAK,EAAE;YACjC,OAAO,IAAI,IAAI,CAAC;SAChB;KACD;IAED,IAAI,KAAK;QAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;IAE5D,IAAI,OAAO,IAAI,QAAQ,EAAE;QACxB,IAAI,OAAO;YAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC;;YACzC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC1B;IACD,OAAO,EAAE,MAAM,QAAA,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,UAAA,EAAE,CAAC;AAC3C,CAAC;AAjDD,4BAiDC","sourcesContent":["type ParsedObject = {\n\tparsed: string[];\n\terror: boolean;\n\tspecials: string[];\n};\n\n/**\n * parses arguments\n * @param args arguments to parse\n * @returns array of arguments, or `null` if missing a dequote\n */\nexport default function parseArgs(args: string): ParsedObject {\n\tconst parsed: string[] = [];\n\tconst specials: string[] = [];\n\n\tlet special = '';\n\tlet quote = false;\n\tlet wasQuote = false;\n\tlet current = '';\n\tfor (let i = 0; i < args.length; i++) {\n\t\tconst char = args[i];\n\n\t\t/*if (special && current && char == ' ') {\n\t\t\tspecials.push(special + current);\n\t\t\tspecial = '';\n\t\t\tcurrent = '';\n\t\t} else */ if (char === '\"' && !quote) {\n\t\t\tquote = true;\n\t\t\twasQuote = true;\n\t\t} else if (char === '\"') {\n\t\t\tquote = false;\n\t\t} else if (!quote && !special && (char === '<' || char === '>')) {\n\t\t\tif (current) {\n\t\t\t\tparsed.push(current);\n\t\t\t\tcurrent = '';\n\t\t\t}\n\t\t\tspecial = char;\n\t\t} else if (char === ' ' && !quote) {\n\t\t\tif (current || wasQuote) {\n\t\t\t\tif (special) {\n\t\t\t\t\tspecials.push(special + current);\n\t\t\t\t\tspecial = '';\n\t\t\t\t} else {\n\t\t\t\t\tparsed.push(current);\n\t\t\t\t}\n\t\t\t\tcurrent = '';\n\t\t\t\twasQuote = false;\n\t\t\t}\n\t\t} else if (char !== ' ' || quote) {\n\t\t\tcurrent += char;\n\t\t}\n\t}\n\n\tif (quote) return { parsed: [], error: true, specials: [] };\n\n\tif (current || wasQuote) {\n\t\tif (special) specials.push(special + current);\n\t\telse parsed.push(current);\n\t}\n\treturn { parsed, error: false, specials };\n}\n"]}